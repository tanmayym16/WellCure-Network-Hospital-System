# WellCure Network Hospital - Project Report

## 1. Introduction
WellCure Network Hospital is a comprehensive hospital management system designed to provide modern healthcare services with a user-friendly interface. The system aims to bridge the gap between technology and healthcare services by offering features such as online appointment booking, emergency ambulance services, and e-pharmacy. 

The project was developed by Tanmay Mathur, a Computer Science and Engineering student at JECRC University, with the vision of enhancing the efficiency and accessibility of healthcare services through advanced digital solutions. The system provides a seamless experience for both healthcare providers and patients, making healthcare services more accessible and efficient.

The WellCure Network Hospital system includes various modules such as appointment booking, ambulance services, e-pharmacy, and information about the hospital's services, doctors, and facilities. The system is designed to be responsive, user-friendly, and secure, ensuring a smooth experience for all users.

## 2. Literature Survey/Review of Literature
The healthcare industry has been rapidly adopting digital technologies to improve service delivery, patient experience, and operational efficiency. Several studies and existing systems have influenced the development of the WellCure Network Hospital system:

1. **Electronic Health Records (EHR) Systems**: Modern healthcare facilities have moved from paper-based records to electronic systems, improving data accessibility, reducing errors, and enhancing patient care coordination.

2. **Online Appointment Scheduling**: Research shows that online appointment booking systems reduce no-show rates by 17.2% and improve patient satisfaction by providing convenience and flexibility.

3. **Emergency Response Systems**: Studies indicate that reducing ambulance response time by even one minute can increase survival rates for critical emergencies by up to 8%.

4. **Telemedicine and Remote Consultations**: The COVID-19 pandemic accelerated the adoption of telemedicine, with studies showing that 76% of patients are now interested in using telehealth services.

5. **Mobile Health Applications**: The global mHealth market is expected to reach $189 billion by 2025, with applications ranging from appointment scheduling to medication reminders and health monitoring.

The WellCure Network Hospital system incorporates these insights to create a comprehensive healthcare management solution that addresses the evolving needs of both patients and healthcare providers.

## 3. Software Requirement Specification

### 3.1 Functional Requirements

#### User Interface Requirements
1. The system shall provide a responsive web interface accessible from various devices.
2. The system shall have a navigation menu for easy access to different sections.
3. The system shall support both light and dark themes for user preference.

#### Appointment Booking Module
1. The system shall allow users to book appointments by providing their name, email, phone number, required service, and preferred date.
2. The system shall validate all input fields to ensure data integrity.
3. The system shall store appointment details in a database.
4. The system shall provide confirmation messages for successful bookings.
5. The system shall prevent booking appointments for past dates.

#### Ambulance Service Module
1. The system shall allow users to request emergency ambulance services.
2. The system shall collect essential information such as name, phone number, address, landmark, and emergency type.
3. The system shall provide a visual countdown timer indicating estimated arrival time.
4. The system shall store ambulance booking details in a database.

#### Information Display
1. The system shall display information about the hospital's services, facilities, and staff.
2. The system shall include testimonials/reviews from patients.
3. The system shall provide contact information and location details.

### 3.2 Non-Functional Requirements

#### Performance Requirements
1. The system shall load pages within 3 seconds under normal network conditions.
2. The system shall handle multiple concurrent users without performance degradation.
3. The system shall process form submissions within 2 seconds.

#### Security Requirements
1. The system shall validate and sanitize all user inputs to prevent SQL injection attacks.
2. The system shall use prepared statements for database operations.
3. The system shall implement proper error handling without exposing sensitive information.

#### Reliability Requirements
1. The system shall be available 24/7 with minimal downtime.
2. The system shall provide appropriate error messages for failed operations.
3. The system shall maintain data integrity during database operations.

#### Usability Requirements
1. The system shall have an intuitive and user-friendly interface.
2. The system shall provide clear feedback for user actions.
3. The system shall be accessible on various devices and screen sizes.

## 4. Software Design

### 4.1 Data Flow Diagrams (DFDs)

#### Level 0 DFD (Context Diagram)
```
+-------------+                                  +-------------------+
|             |  Appointment/Ambulance Request   |                   |
|    User     | --------------------------->     | WellCure Network  |
|             |                                  | Hospital System   |
|             |  Confirmation/Information        |                   |
|             | <---------------------------     |                   |
+-------------+                                  +-------------------+
```

#### Level 1 DFD
```
                      +-------------------+
                      |                   |
                      | User Interface    |
                      |                   |
                      +-------------------+
                        /|\          /|\
                         |            |
                         |            |
                         |            |
+-------------------+    |            |    +-------------------+
|                   |    |            |    |                   |
| Appointment       |<---+            +--->| Ambulance         |
| Booking Module    |                      | Service Module    |
|                   |                      |                   |
+-------------------+                      +-------------------+
        |                                          |
        |                                          |
        |                                          |
        v                                          v
+-------------------+                      +-------------------+
|                   |                      |                   |
| Appointment       |                      | Ambulance         |
| Database          |                      | Database          |
|                   |                      |                   |
+-------------------+                      +-------------------+
```

### 4.2 UML Diagrams

#### Class Diagram
```
+-------------------+          +-------------------+
|     Database      |          |    FormHandler    |
+-------------------+          +-------------------+
| - conn            |          | - errors[]        |
+-------------------+          | - message         |
| + connect()       |<---------| - message_type    |
| + disconnect()    |          +-------------------+
| + query()         |          | + validate()      |
+-------------------+          | + process()       |
                               | + displayMessage()|
                               +-------------------+
                                        ^
                                        |
                                        |
                    +-------------------+-------------------+
                    |                                       |
        +-----------------------+               +-----------------------+
        | AppointmentHandler    |               | AmbulanceHandler      |
        +-----------------------+               +-----------------------+
        | - name                |               | - name                |
        | - email               |               | - phone               |
        | - number              |               | - address             |
        | - services            |               | - landmark            |
        | - date                |               | - emergency_type      |
        +-----------------------+               +-----------------------+
        | + validateForm()      |               | + validateForm()      |
        | + saveAppointment()   |               | + saveRequest()       |
        +-----------------------+               +-----------------------+
```

#### Sequence Diagram for Appointment Booking
```
User                    UI                      AppointmentHandler           Database
 |                       |                              |                       |
 | Fill appointment form |                              |                       |
 |---------------------> |                              |                       |
 |                       | Submit form                  |                       |
 |                       |----------------------------> |                       |
 |                       |                              | Validate form data    |
 |                       |                              |--------------------   |
 |                       |                              |                   |   |
 |                       |                              | <------------------   |
 |                       |                              |                       |
 |                       |                              | Save appointment      |
 |                       |                              |---------------------->|
 |                       |                              |                       |
 |                       |                              |      Confirmation     |
 |                       |                              |<----------------------|
 |                       | Display confirmation         |                       |
 |                       |<-----------------------------|                       |
 | View confirmation     |                              |                       |
 |<---------------------|                              |                       |
 |                       |                              |                       |
```

#### Use Case Diagram
```
                    +-----------------------------------+
                    |       WellCure Network System     |
                    +-----------------------------------+
                    |                                   |
+--------+          | +------------+    +------------+ |
|        |          | |            |    |            | |
|        |---->-----| | Book       |    | Request    | |
|        |          | | Appointment|    | Ambulance  | |
| User   |          | |            |    |            | |
|        |          | +------------+    +------------+ |
|        |          |                                  |
|        |          | +------------+    +------------+ |
|        |---->-----| | View       |    | Access     | |
|        |          | | Services   |    | E-Pharmacy | |
+--------+          | |            |    |            | |
                    | +------------+    +------------+ |
                    |                                  |
                    +-----------------------------------+
```

### 4.3 Database Design

#### Entity-Relationship (ER) Diagram
```
+-------------------+                      +-------------------+
|   contact_form    |                      | ambulance_bookings|
+-------------------+                      +-------------------+
| PK: id            |                      | PK: id            |
| name              |                      | name              |
| email             |                      | phone             |
| number            |                      | address           |
| services          |                      | landmark          |
| date              |                      | emergency_type    |
+-------------------+                      | booking_time      |
                                           +-------------------+
```

#### Database Tables

**contact_form Table**
- id (int, Primary Key, Auto Increment)
- name (varchar(100), Not Null)
- email (varchar(100), Not Null)
- number (varchar(10), Not Null)
- date (datetime, Not Null)
- services (varchar(100), Not Null)

**ambulance_bookings Table**
- id (int, Primary Key, Auto Increment)
- name (varchar(100), Not Null)
- phone (varchar(10), Not Null)
- address (varchar(255), Not Null)
- landmark (varchar(100), Not Null)
- emergency_type (varchar(100), Not Null)
- booking_time (timestamp, Not Null, Default: current_timestamp)

## 5. Software and Hardware Requirements

### 5.1 Software Requirements

#### Development Environment
- PHP 7.0 or higher
- MySQL 5.7 or higher / MariaDB 10.2 or higher
- Apache or Nginx web server
- Web browser (Chrome, Firefox, Safari, Edge)
- Text editor or IDE (VS Code, PHPStorm, etc.)

#### Production Environment
- Web hosting with PHP 7.0+ support
- MySQL/MariaDB database
- SSL certificate for secure connections
- Domain name

#### Libraries and Frameworks
- Font Awesome 6.5.2 (for icons)
- GSAP 3.12.2 (for animations)
- ScrollTrigger (for scroll-based animations)

### 5.2 Hardware Requirements

#### Server Requirements
- Processor: Dual-core processor or higher
- RAM: 4GB or higher
- Storage: 10GB or higher for the application and database
- Network: Stable internet connection with sufficient bandwidth

#### Client Requirements
- Any device with a modern web browser (desktop, laptop, tablet, smartphone)
- Internet connection
- Screen resolution: 320px minimum width (responsive design)

## 6. Coding /Code Templates

### 6.1 Database Configuration (db_config.php)
```php
<?php
/**
 * Database Configuration File
 * 
 * This file contains the database connection parameters.
 * Update these values according to your hosting environment.
 */

// Database connection parameters
$db_host = 'localhost';     // Database host
$db_user = 'root';          // Database username
$db_pass = '';              // Database password
$db_name = 'contact_db';    // Database name

// Create database connection
$conn = null;
try {
    $conn = mysqli_connect($db_host, $db_user, $db_pass, $db_name);
    if (!$conn) {
        throw new Exception('Database connection failed: ' . mysqli_connect_error());
    }
    
    // Set charset for better security and internationalization
    mysqli_set_charset($conn, 'utf8mb4');
    
} catch (Exception $e) {
    $error_message = $e->getMessage();
    // Display error message
    $message = 'Database connection error: ' . $error_message;
    $message_type = 'error';
    // Log error (in a production environment)
    // error_log($error_message);
}
?>
```

### 6.2 Appointment Booking Form Processing (index.php)
```php
// Process form submission
if(isset($_POST['submit'])){
    // Sanitize input data
    $name = isset($_POST['name']) ? trim($_POST['name']) : '';
    $email = isset($_POST['email']) ? trim($_POST['email']) : '';
    $number = isset($_POST['number']) ? trim($_POST['number']) : '';
    $services = isset($_POST['services']) ? trim($_POST['services']) : '';
    $date = isset($_POST['date']) ? trim($_POST['date']) : '';

    $errors = [];

    // Validation
    if(empty($name)) {
        $errors[] = 'Name is required';
    } elseif(strlen($name) > 100) {
        $errors[] = 'Name must be less than 100 characters';
    }

    if(empty($email)) {
        $errors[] = 'Email is required';
    } elseif(!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors[] = 'Please enter a valid email address';
    } elseif(strlen($email) > 100) {
        $errors[] = 'Email must be less than 100 characters';
    }

    if(empty($number)) {
        $errors[] = 'Phone number is required';
    } elseif(!preg_match('/^[0-9]{10}$/', $number)) {
        $errors[] = 'Please enter a valid 10-digit phone number';
    }

    if(empty($date)) {
        $errors[] = 'Date is required';
    } elseif(strtotime($date) < strtotime(date('Y-m-d'))) {
        $errors[] = 'Please select a future date';
    }

    if(empty($services)) {
        $errors[] = 'Service selection is required';
    } elseif(!in_array($services, $valid_services)) {
        $errors[] = 'Please select a valid service';
    }

    // Process form if no errors
    if(empty($errors) && $conn) {
        // Use prepared statement with improved error handling
        $stmt = mysqli_prepare($conn, "INSERT INTO `contact_form`(name, email, number, services, date) VALUES(?, ?, ?, ?, ?)");

        if ($stmt) {
            // Convert date to datetime format by adding time (00:00:00)
            $datetime = $date . ' 00:00:00';
            mysqli_stmt_bind_param($stmt, 'sssss', $name, $email, $number, $services, $datetime);
            $success = mysqli_stmt_execute($stmt);

            if($success) {
                $message = 'Appointment made successfully!';
                $message_type = 'success';

                // Clear form data after successful submission
                $name = $email = $number = $services = $date = '';
            } else {
                $error = mysqli_stmt_error($stmt);
                $message = 'Appointment failed: ' . $error;
                $message_type = 'error';
            }

            mysqli_stmt_close($stmt);
        } else {
            $error = mysqli_error($conn);
            $message = 'System error: ' . $error;
            $message_type = 'error';
        }
    } else if(!empty($errors)) {
        $message = implode('<br>', $errors);
        $message_type = 'error';
    }
}
```

### 6.3 Ambulance Booking Form Processing (ambulance.php)
```php
if(isset($_POST['submit_ambulance'])){
    // Sanitize and validate input data
    $name = isset($_POST['name']) ? trim($_POST['name']) : '';
    $phone = isset($_POST['phone']) ? trim($_POST['phone']) : '';
    $address = isset($_POST['address']) ? trim($_POST['address']) : '';
    $landmark = isset($_POST['landmark']) ? trim($_POST['landmark']) : '';
    $emergency_type = isset($_POST['emergency_type']) ? trim($_POST['emergency_type']) : '';

    $errors = [];

    // Validation
    if(empty($name)) {
        $errors[] = 'Name is required';
    } elseif(strlen($name) > 100) {
        $errors[] = 'Name must be less than 100 characters';
    }

    if(empty($phone)) {
        $errors[] = 'Phone number is required';
    } elseif(!preg_match('/^[0-9]{10}$/', $phone)) {
        $errors[] = 'Please enter a valid 10-digit phone number';
    }

    if(empty($address)) {
        $errors[] = 'Address is required';
    } elseif(strlen($address) > 255) {
        $errors[] = 'Address must be less than 255 characters';
    }

    if(empty($landmark)) {
        $errors[] = 'Landmark is required';
    } elseif(strlen($landmark) > 100) {
        $errors[] = 'Landmark must be less than 100 characters';
    }

    if(empty($emergency_type)) {
        $errors[] = 'Emergency type is required';
    } elseif(!in_array($emergency_type, ['Medical Emergency', 'Accident', 'Cardiac Arrest', 'Respiratory Distress', 'Pregnancy', 'Other'])) {
        $errors[] = 'Please select a valid emergency type';
    }

    // Process form if no errors
    if(empty($errors) && $conn) {
        // Use prepared statement to prevent SQL injection
        $stmt = mysqli_prepare($conn, "INSERT INTO `ambulance_bookings`(name, phone, address, landmark, emergency_type) VALUES(?, ?, ?, ?, ?)");
        mysqli_stmt_bind_param($stmt, 'sssss', $name, $phone, $address, $landmark, $emergency_type);

        $success = mysqli_stmt_execute($stmt);

        if($success) {
            $message = 'Ambulance dispatched! Our team will reach you within 10 minutes.';
            $message_type = 'success';

            // Clear form data after successful submission
            $name = $phone = $address = $landmark = $emergency_type = '';
        } else {
            $message = 'Booking failed. Please try again or call our emergency number.';
            $message_type = 'error';
        }

        mysqli_stmt_close($stmt);
    } else if(!empty($errors)) {
        $message = implode('<br>', $errors);
        $message_type = 'error';
    }
}
```

### 6.4 Countdown Timer for Ambulance (ambulance.php)
```javascript
document.addEventListener('DOMContentLoaded', function() {
    const timerElement = document.querySelector('.timer');
    let timeLeft = 600; // 10 minutes in seconds

    function updateTimer() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

        if (timeLeft > 0) {
            timeLeft--;
            setTimeout(updateTimer, 1000);
        } else {
            timerElement.textContent = "ARRIVED";
            timerElement.style.backgroundColor = "#4CAF50";
        }
    }

    // Start the timer when the page loads
    updateTimer();
});
```

## 7. Testing

### 7.1 Black Box Testing

#### Test Case 1: Appointment Booking with Valid Data
- **Input**: 
  - Name: John Doe
  - Email: john@example.com
  - Phone: 9876543210
  - Service: General Checkup
  - Date: Future date (e.g., tomorrow)
- **Expected Output**: Success message "Appointment made successfully!"
- **Actual Output**: Success message "Appointment made successfully!"
- **Status**: Pass

#### Test Case 2: Appointment Booking with Invalid Data
- **Input**: 
  - Name: John Doe
  - Email: invalid-email
  - Phone: 9876543210
  - Service: General Checkup
  - Date: Future date
- **Expected Output**: Error message "Please enter a valid email address"
- **Actual Output**: Error message "Please enter a valid email address"
- **Status**: Pass

#### Test Case 3: Ambulance Booking with Valid Data
- **Input**: 
  - Name: Jane Smith
  - Phone: 9876543210
  - Address: 123 Main St, Jaipur
  - Landmark: Near City Park
  - Emergency Type: Medical Emergency
- **Expected Output**: Success message "Ambulance dispatched! Our team will reach you within 10 minutes."
- **Actual Output**: Success message "Ambulance dispatched! Our team will reach you within 10 minutes."
- **Status**: Pass

### 7.2 White Box Testing

#### Test Case 1: Database Connection Error Handling
- **Test Scenario**: Simulate database connection failure
- **Code Path**: db_config.php try-catch block
- **Expected Behavior**: Error message displayed without exposing sensitive information
- **Actual Behavior**: Error message "Database connection error: [error message]" displayed
- **Status**: Pass

#### Test Case 2: SQL Injection Prevention
- **Test Scenario**: Attempt SQL injection in appointment form
- **Code Path**: Prepared statement in index.php
- **Expected Behavior**: Input sanitized and no SQL injection possible
- **Actual Behavior**: Input sanitized and no SQL injection possible
- **Status**: Pass

#### Test Case 3: Form Validation Logic
- **Test Scenario**: Test validation logic for past dates in appointment form
- **Code Path**: Date validation in index.php
- **Expected Behavior**: Error message if past date is selected
- **Actual Behavior**: Error message "Please select a future date" displayed
- **Status**: Pass

## 8. Output Screens

### 8.1 Home Page
The home page features a clean, modern design with a hero section displaying the hospital's tagline "Quality Healthcare, Modern Approach" and call-to-action buttons for booking appointments, accessing emergency ambulance services, e-pharmacy, and viewing services. The page includes a responsive navigation menu and a theme toggle button.

### 8.2 About Section
The about section provides information about WellCure Network Hospital, describing it as a state-of-the-art hospital dedicated to providing world-class medical facilities and compassionate care. It includes an image and a button to view services.

### 8.3 Services Section
The services section displays a grid of cards, each representing a different service offered by the hospital. Services include General Checkup, Vaccination, Laboratory Tests, Specialist Consultation, Emergency Care, Pediatric Services, Cardiology, Orthopedics, and Mental Health Services. Each card includes an icon, title, and brief description.

### 8.4 Reviews Section
The reviews section features a testimonial slider with feedback from patients. Each testimonial includes a patient photo, quote, and name. The testimonials highlight various aspects of the hospital's services, including doctor professionalism, ambulance service efficiency, appointment booking convenience, and quality of specialized care.

### 8.5 Contact Section
The contact section displays the hospital's contact information, including phone number, organization name, email, and location. It also includes a Google Maps iframe showing the hospital's location.

### 8.6 Appointment Booking Form
The appointment booking form allows users to schedule appointments by providing their name, email, phone number, required service, and preferred date. The form includes validation for all fields and displays success or error messages after submission.

### 8.7 Ambulance Service Page
The ambulance service page features a prominent hero section with an emergency badge, heading, description, and countdown timer. Below is an information section describing the ambulance service features and a form for booking an ambulance. The form collects patient/contact name, phone number, pickup address, nearest landmark, and emergency type.

### 8.8 Footer
The footer includes the hospital logo, copyright information, and a credit line. It also features a floating WhatsApp button for quick contact.

## 9. Conclusion

The WellCure Network Hospital system successfully implements a comprehensive hospital management solution with a focus on user experience and modern design. The system provides essential healthcare services through an intuitive web interface, making it accessible to a wide range of users.

Key achievements of the project include:

1. **User-Friendly Interface**: The system features a clean, responsive design that works well on various devices, ensuring accessibility for all users.

2. **Comprehensive Service Offering**: The system includes modules for appointment booking, ambulance services, and e-pharmacy, covering the essential needs of patients.

3. **Security and Data Integrity**: The implementation includes proper input validation, prepared statements for database operations, and error handling to ensure security and data integrity.

4. **Modern Technologies**: The system utilizes modern web technologies such as responsive design, animations, and interactive elements to enhance user experience.

5. **Efficient Database Design**: The database structure is well-designed with appropriate tables and relationships to store and retrieve data efficiently.

The WellCure Network Hospital system demonstrates how technology can be leveraged to improve healthcare service delivery, making it more accessible, efficient, and user-friendly. The system serves as a solid foundation for future enhancements and expansions.

## 10. Further Enhancements/Recommendations

While the current implementation of the WellCure Network Hospital system provides a solid foundation, several enhancements could be considered for future versions:

1. **User Authentication System**: Implement a secure login system for patients and staff to access personalized features and protected information.

2. **Patient Dashboard**: Create a dashboard for registered patients to view their appointment history, medical records, and upcoming appointments.

3. **Doctor Management Module**: Add functionality for managing doctors, their schedules, and specialties, allowing for more precise appointment scheduling.

4. **Online Payment Integration**: Implement payment gateways to allow patients to pay for services online, enhancing convenience.

5. **Telemedicine Integration**: Add video consultation capabilities to enable remote doctor-patient interactions.

6. **Prescription Management**: Develop a system for doctors to issue digital prescriptions that can be directly sent to the e-pharmacy.

7. **Automated Notifications**: Implement SMS and email notifications for appointment reminders, confirmations, and updates.

8. **Analytics Dashboard**: Create a dashboard for administrators to view statistics and insights about appointments, services, and patient demographics.

9. **Mobile Application**: Develop native mobile applications for iOS and Android to provide a more optimized experience for mobile users.

10. **Multilingual Support**: Add support for multiple languages to make the system accessible to a broader audience.

These enhancements would further improve the functionality, usability, and reach of the WellCure Network Hospital system, making it an even more comprehensive healthcare management solution.

## 11. References/Bibliography

1. PHP Official Documentation. (2023). Retrieved from https://www.php.net/docs.php

2. MySQL Documentation. (2023). Retrieved from https://dev.mysql.com/doc/

3. World Health Organization. (2021). Digital Health Strategy 2020-2025. Retrieved from https://www.who.int/

4. Kruse, C. S., & Beane, A. (2018). Health Information Technology Continues to Show Positive Effect on Medical Outcomes: Systematic Review. Journal of Medical Internet Research, 20(2), e41.

5. Font Awesome Documentation. (2023). Retrieved from https://fontawesome.com/docs

6. GSAP Animation Library. (2023). Retrieved from https://greensock.com/docs/

7. W3C Web Accessibility Initiative. (2023). Web Content Accessibility Guidelines (WCAG). Retrieved from https://www.w3.org/WAI/

8. Responsive Web Design Principles. (2023). Retrieved from https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Responsive/responsive_design_building_blocks

9. OWASP Top Ten. (2021). Retrieved from https://owasp.org/www-project-top-ten/

10. Healthcare Information and Management Systems Society (HIMSS). (2023). Retrieved from https://www.himss.org/

## 12. Appendices

### Appendix A: Database Schema SQL

```sql
-- Contact Form Table
CREATE TABLE `contact_form` (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `email` varchar(100) NOT NULL,
  `number` varchar(10) NOT NULL,
  `date` datetime NOT NULL,
  `services` varchar(100) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Ambulance Bookings Table
CREATE TABLE `ambulance_bookings` (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `phone` varchar(10) NOT NULL,
  `address` varchar(255) NOT NULL,
  `landmark` varchar(100) NOT NULL,
  `emergency_type` varchar(100) NOT NULL,
  `booking_time` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
```

### Appendix B: Deployment Instructions

For detailed deployment instructions, please refer to the README.md file included with the project. The file contains information on:

1. Prerequisites for deployment
2. Local development setup
3. Production deployment steps
4. Database setup (automatic and manual)
5. Configuration options
6. Troubleshooting common issues

The project includes a deployment script (deploy.php) that automates many of the setup tasks, including database table creation and environment verification.